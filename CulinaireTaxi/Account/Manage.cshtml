@using WebMatrix.WebData

@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    WebSecurity.RequireAuthenticatedUser();

    Layout = "_Layout.cshtml";
    Page.Title = "Manage Account";

    var action = Request.Form["action"];

    bool hasLocalAccount = OAuthWebSecurity.HasLocalAccount(WebSecurity.CurrentUserId);

    string successMessage = "";
    var message = Request.QueryString["message"];
    if (message == "ChangedPassword") {
        successMessage = "Your password has been changed.";
    } else if (message == "SetPassword") {
        successMessage = "Your password has been set.";
    } else if (message == "RemovedLogin") {
        successMessage = "The external login was removed.";
    }

    var externalLogins =
        (from account in OAuthWebSecurity.GetAccountsFromUserName(WebSecurity.CurrentUserName)
         let clientData = OAuthWebSecurity.GetOAuthClientData(account.Provider)
         select new { Provider = account.Provider, ProviderDisplayName = clientData.DisplayName, UserId = account.ProviderUserId })
        .ToList();
    bool canRemoveLogin = externalLogins.Count > 1 || hasLocalAccount;

    // Setup validation
    if (hasLocalAccount) {
        Validation.RequireField("currentPassword", "The current password field is required.");
        Validation.Add("currentPassword",
            Validator.StringLength(
                maxLength: Int32.MaxValue,
                minLength: 6,
                errorMessage: "Current password must be at least 6 characters"));
    }
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.Required("The confirm new password field is required."),
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost) {
        AntiForgery.Validate();
        if (action == "password") {
            // Handle local account password operations
            var currentPassword = Request.Form["currentPassword"];
            var newPassword = Request.Form["newPassword"];
            var confirmPassword = Request.Form["confirmPassword"];

            if (Validation.IsValid()) {
                if (hasLocalAccount) {
                    if (WebSecurity.ChangePassword(WebSecurity.CurrentUserName, currentPassword, newPassword)) {
                        Response.Redirect("~/Account/Manage?message=ChangedPassword");
                        return;
                    } else {
                        ModelState.AddFormError("An error occurred when attempting to change the password. Please contact the site owner.");
                    }
                } else {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    try {
                        WebSecurity.CreateAccount(WebSecurity.CurrentUserName, newPassword, requireEmailConfirmation);
                        Response.Redirect("~/Account/Manage?message=SetPassword");
                        return;
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                }
            } else {
                ModelState.AddFormError("Password change was unsuccessful. Please correct the errors and try again.");
            }
        } else if (action == "removeLogin") {
            // Remove external login
            var provider = Request.Form["provider"];
            var userId = Request.Form["userId"];

            message = null;
            var ownerAccount = OAuthWebSecurity.GetUserName(provider, userId);
            // Only remove the external login if it is owned by the currently logged in user and it is not the users last login credential
            if (ownerAccount == WebSecurity.CurrentUserName && canRemoveLogin) {
                OAuthWebSecurity.DeleteAccount(provider, userId);
                message = "RemovedLogin";
            }
            Response.Redirect(Href("~/Account/Manage", new { message }));
            return;
        } else {
            // Assume this an external login request
            string provider = Request.Form["provider"];
            if (!provider.IsEmpty()) {
                OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl = Href("~/Account/Manage") }));
                return;
            }
        }
    }
}

    <div class="row">
        <div class="col s12">
            <div class="row">
                <div class="col s12">
                    <div class="card">
                        <div class="card-content">
                            <div class="col s12 center" style="margin-bottom:20px;">
                                <h5>@Page.Title</h5>
                                @if (!successMessage.IsEmpty())
                                {
                                    <p class="message-success">
                                        @successMessage
                                    </p>
                                }
                            </div>
                            <div class="row">
                                <form id="change-password-form" method="post">
                                    @AntiForgery.GetHtml()
                                    @Html.ValidationSummary(excludeFieldErrors: true)
                                    <div asp-validation-summary="All" class="text-danger"></div>
                                    <div class="form-group">
                                        <label for="currentPassword" @if (!ModelState.IsValidField("currentPassword")) { <text> class="form-control" </text> }>Current password</label>
                                        <input type="password" id="currentPassword" name="currentPassword" @Validation.For("currentPassword") />
                                        @Html.ValidationMessage("currentPassword")
                                    </div>
                                    <div class="form-group">
                                        <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text> }>New password</label>
                                        <input type="password" id="newPassword" name="newPassword" @Validation.For("newPassword") />
                                        @Html.ValidationMessage("newPassword")
                                    </div>
                                    <div class="form-group">
                                        <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text> }>Confirm new password</label>
                                        <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                                        @Html.ValidationMessage("confirmPassword")
                                    </div>
                                    <button type="submit" class="btn btn-default" name="action" value="password">Wachtwoord updaten</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>









