@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/Shared/_Layout.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    int type = 0;
    int id = 0;

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        type = Int32.Parse(Request.Form["type"]);


        // If all information is valid, create a new account
        if (Validation.IsValid())
        {
            // Insert a new user into the database
            var db = Database.Open("Database");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null)
            {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);


                var query = db.Query("SELECT UserId FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);


                foreach (var row in query)
                {
                    id = row.UserId;
                }



                db.Execute("INSERT INTO UserInfo (UserId, Role) VALUES (@0, @1)", id, type);






                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try
                {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation)
                    {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation)
                    {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    }
                    else
                    {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                }
                catch (System.Web.Security.MembershipCreateUserException e)
                {
                    ModelState.AddFormError(e.Message);
                }
            }
            else
            {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

    <main class="login-main">
        <div id="login-page" class="row">
            <div class="col s12 z-depth-6 card-panel">
                <form method="post" class="login-form">
                    <div class="row">
                        @AntiForgery.GetHtml()
                        @* If at least one validation error exists, notify the user *@
                        @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <i class="material-icons prefix">mail_outline</i>
                            <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }>Email address</label>
                            <input type="text" id="email" class="form-control" name="email" value="@email" @Validation.For("email") />
                            @* Write any email validation errors to the page *@
                            @Html.ValidationMessage("email")
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <i class="material-icons prefix">lock_outline</i>
                            <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }>Password</label>
                            <input type="password" id="password" class="form-control" name="password" @Validation.For("password") />
                            @* Write any password validation errors to the page *@
                            @Html.ValidationMessage("password")
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12 m12 l12  login-text">
                            <i class="material-icons prefix">lock_outline</i>
                            <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text> }>Confirm password</label>
                            <input type="password" id="confirmPassword" class="form-control" name="confirmPassword" @Validation.For("confirmPassword") />
                            @* Write any password validation errors to the page *@
                            @Html.ValidationMessage("confirmPassword")
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <select id="type" name="type">
                                <option value="" disabled selected>Selecteer uw rol</option>
                                <option value="1">Gebruiker</option>
                                <option value="2">Restaurant</option>
                                <option value="3">Taxi</option>
                            </select>
                            <label>Rol:</label>
                        </div>
                    </div>

                    <div class="row">
                        <div class="input-field col s12">
                            <button type="submit" class="btn waves-effect waves-light col s12">Registreer</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>
